package Questions;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

/* QUESTION

Given an Array of numbers

You have to find all possible non-empty subsets of the array of numbers and then, for each subset, find the difference between the largest and smallest numbers in that subset Then add up all the differences to get the number.

As the number may be large, output the number modulo 10e9 + 7 (1000000007).

Example:

A = [1, 2]

All subsets
[1]    largest-smallest = 1 - 1 = 0
[2]    largest-smallest = 2 - 2 = 0
[1 2]  largest-smallest = 2 - 1 = 1

Sum of the differences = 0 + 0 + 1 = 1

So resultant number is 1
Constraints:
1 ≤ N ≤ 10000

*/

/*  

Input :  8 3 10 2 3 8 1 10 4
Expected : 1787
My Code : 1491

Input
                852 1579 1883 110 368 777 985 572 347 1592 612 488 1719 115 487 1495 877 1863
Expected : 293358721
My Code :  160870738
           1000000007

*/

public class SumtheDifference {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputListSize = sc.nextInt();

        ArrayList<Integer> inputList = new ArrayList<Integer>();
        for (int i = 0; i < inputListSize; i++) {
            int inputNumber = sc.nextInt();
            inputList.add(inputNumber);
        }
        long start = System.nanoTime();
        //call function here.....
        System.out.println(solve(inputList));
        long end = System.nanoTime();
        System.out.println("\nTime taken : " + (end - start));

    }

    public static int solveSLOW(ArrayList<Integer> A) {

        if ( A.size() == 0 ) return 0;
        long output=0;
        ArrayList<Integer> temp = new ArrayList<Integer>();
        temp.add(Integer.MAX_VALUE);
        temp.add(Integer.MIN_VALUE);
         output = generate(A,output,temp,0);
         return (int)output%1000000007;

    }

    public static long generate(ArrayList<Integer> a,long output, ArrayList<Integer> temp, int index)
    {
        for (int i = index; i < a.size(); i++)
        {
            int min = Integer.MAX_VALUE,max = Integer.MIN_VALUE;
            boolean minFlag=false,maxFlag = false;
            if(a.get(i) < temp.get(0)) {
                min = temp.get(0);
                temp.set(0,a.get(i));
                minFlag = true;
            }
            if ( a.get(i) > temp.get(1)){
                max =temp.get(1);
                temp.set(1,a.get(i));
                maxFlag = true;
            }
            output = output + temp.get(1) - temp.get(0);
            output = generate(a, output, temp, i+1);
            if ( minFlag ) temp.set(0,min);
            if ( maxFlag ) temp.set(1,max);

        }
        return output;
    }

    public static int solve( ArrayList<Integer> A){
        if ( A.size() == 0 ) return 0;
        long output=0;
        Collections.sort(A);
        for (int i = 0; i < A.size(); i++) {
            for (int j = A.size()-1; j >=i ; j--) {
                output = (output%1000000007 + (((A.get(j) - A.get(i))%1000000007)*(powMod(2,j-i-1,1000000007)))%1000000007)%1000000007;
            }
        }
        return (int)output;

    }
    public  static long powMod ( int a , int b , int c){
        long res = 1;
         a = a % c;
        while (b > 0)
        {
            if (b % 2 == 1)
                res = (res*a) % c;
            b = b/2;
            a = (a*a) % c;
        }
        return res;
    }
}

/* SOLUTION APPROACH

*/